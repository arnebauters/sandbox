require "net/http"

def url_exist?(url_string,user,pass)
  uri = URI.parse(url_string)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = (uri.scheme == 'https')
  req = Net::HTTP::Head.new(uri.request_uri)
  req.basic_auth(user,pass)
  res = http.request(req)
  res.code == "200" # false if return 200
rescue Errno::ENOENT
  false # false if can't find the server
end


Vagrant.configure("2") do |config|
  envvars = { }

  sandbox_type = "core"
  # Enterprise
  if ENV['SE_USER'] &&  ENV['SE_PASS']
    puts "No Enterprise option for Sensu 2.x yet."
    abort 
  end 
  envvars["SENSU_SANDBOX_TYPE"] = sandbox_type

  config.vm.define "sensu-2.x-sandbox-x86-64", default: true, autostart: true do |sandbox|
    # Bento centos7 box 
    sandbox.vm.box = "bento/centos-7"

    sandbox.vm.hostname = "sensu-2.x-sandbox" 

    # Support virtualbox provider
    sandbox.vm.provider "virtualbox" do |vb, vboxoverride|
      vb.cpus = 2
      vb.memory = 2048
      vb.name = "sensu-2.0-sandbox-x86-64"
    end
    
    # Create forwarded port mapping which allows host access to specific sandbox ports
    if ENV['ENABLE_SENSU_SANDBOX_PORT_FORWRDING'] 
      # Forward Sensu backend APIs
      sandbox.vm.network "forwarded_port", guest: 2379, host: 2379
      sandbox.vm.network "forwarded_port", guest: 2380, host: 2380
      sandbox.vm.network "forwarded_port", guest: 8080, host: 8080
      sandbox.vm.network "forwarded_port", guest: 8081, host: 8081

      # Forward Sensu Dashboard to localhost 3002 -> Non conflicting with sensu classic sandbox
      sandbox.vm.network "forwarded_port", guest: 3000, host: 3002
      # Forward Grafana Dashboard to localhost 4002 -> Non clonficting with sensu classic sandbox
      sandbox.vm.network "forwarded_port", guest: 4000, host: 4002

      envvars["ENABLE_SENSU_SANDBOX_PORT_FORWRDING"] = ENV['ENABLE_SENSU_SANDBOX_PORT_FORWRDING']
    end 

    if ENV['SHARED_SENSU_DIR']
      if File.directory?(ENV['ENABLE_SHARED_SENSU_DB']) 
        sandbox.vm.synced_folder ENV['SHARED_SENSU_DIR'], "/var/lib/sensu"
      else
        puts "Shared Dir is invalid"
        abort
      end
      envvars["SHARED_SENSU_DIR"] = ENV['SHARED_SENSU_DIR'] 
    end

    if ENV['ENABLE_SENSU_NIGHTYLY']
      envvars["ENABLE_SENSU_NIGHTLY"] = ENV['ENABLE_SENSU_NIGHTLY']
    end

    sandbox.vm.synced_folder "./files", "/vagrant_files"
    sandbox.vm.provision "shell",
      env: envvars,
      path: "./provision/setup.sh"
  end
end
